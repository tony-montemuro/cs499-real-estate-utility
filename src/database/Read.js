/* ===== IMPORTS ===== */
import { supabase } from "./SupabaseClient";

const Read = () => {
    /* ===== FUNCTIONS ===== */
    
    // FUNCTION 1: fetchAbbreviatedListings - fetch array of abbreviated listings from the database
    // PRECONDITIONS (0 parameters):
    // this will have parameters soon...
    // POSTCONDITIONS (1 returns, 1 possible outcome):
    // await the call to fetch array of Abbreviated Listings objects from the database. if an error is detected, handle it. 
    // otherwise, we return:
    // 1.) abbreviatedListings: the array of abbreviatedListing objects (an empty array if we get an error)
    const fetchAbbreviatedListings = async () => {
        try {
            const { data: abbreviatedListings, error, status } = await supabase
                .from("listing")
                .select(`
                    agent (
                        agency (
                            name
                        ),
                        name
                    ),
                    listing_id,
                    price,
                    property (
                        city,
                        small,
                        sqr_feet,
                        state,
                        street,
                        zip
                    )
                `)
                .order("listing_id");

            // error handling
            if (error && status !== 406) {
                throw error;
            }

            // return data
            return abbreviatedListings;

        } catch (error) {
            console.log(error);
            alert(error.message);
            return [];
        };
    };
    
    const fetchFullListing = async (id) => {
        try{
            const { data: fullListing, error, status } = await supabase
                .from("listing")
                .select(`
                    agent (
                        agency (
                            name,
                            street,
                            city,
                            state,
                            zip,
                            phone_number
                        ),
                        name,
                        email,
                        phone_number
                    ),
                    listing_id,
                    price,
                    property (
                        city,
                        sqr_feet,
                        state,
                        street,
                        zip,
                        lot_size,
                        dwelling_type,
                        subdivision,
                        school_district,
                        shopping_areas
                    )
                `)
                .eq("listing_id", id)
                .maybeSingle();
                
            // error handling
            if (error) {
                throw error;
            }
            
            // return data
            console.log(fullListing);
            return fullListing;
                
        } catch (error) {
            console.log(error);
            alert(error.message);
            return {};
        };

    }
            
    // FUNCTION 3: fetchImageByFilename - given a filename, fetch the image from the database
    // PRECONDITIONS (1 parameter):
    // 1.) fileName: a string representing a valid file in the database, must also be well formatted (include file extension)
    // POSTCONDITIONS (1 returns, 1 possible outcome):
    // await the call to database storage for the image. if we get an error, we will handle it here. otherwise, return:
    // 1.) an image URL generated by the blob (null if we get an error)
    const fetchImageByFilename = async (fileName) => {
        try {
            const { data: blob, error } = await supabase.storage.from("property-images").download(fileName);

            // error handling
            if (error) {
                throw error;
            }

            // use the createObjectURL method to turn the blob into a URL, and return that
            return URL.createObjectURL(blob);

        } catch (error) {
            console.log(error);
            alert(error.message);
            return null;
        }
    };

    const fetchAbbreviatedShowings = async (lower, upper) => {
        try {
            const { data:abbreviatedShowings, count, error, status} = await supabase
                .from("showing")
                .select(`
                    showing_id,
                    start_time,
                    end_time,
                    listing (
                        agent (
                            agency (
                                name
                            ),
                            name
                        ),
                        listing_id,
                        property (
                            street,
                            city,
                            small,
                            state,
                            zip
                        )
                    ),
                    agent (
                        name,
                        agency (
                            name
                        )
                    )
                `, { count: "exact" })
                .range(lower, upper)
                .order("showing_id");

            // error handling
            if (error && status !== 406) {
                throw error;
            }

            //return data
            return { abbreviatedShowings: abbreviatedShowings, count: count };
        }
        catch (error) {
            console.log(error);
            alert(error.message);
            return [];
        }
    };

    // FUNCTION 5 - fetchAgentById - given a user id, fetch an agent object from the database, and return it
    // PRECONDITIONS (1 parameter):
    // 1.) id - a string value, representing a uuid belonging to a unique agent user in the database
    // POSTCONDITIONS (1 return, 2 possible outcomes):
    // if the query is successful, return:
    // 1.) agent - an object that contains information about the agent corresponding to the id parameter
    // otherwise, the user is alerted of the error that has occured, and null is returned
    const fetchAgentById = async (id) => {
        try {
            const { data: agent, error } = await supabase
                .from("agent")
                .select("agency, agent_id, name, user_id")
                .eq("user_id", id)
                .maybeSingle();

            // error handling
            if (error) {
                throw error;
            }

            // if there is no error, simply return the result of the query
            return agent;

        } catch (error) {
            console.log(error);
            alert(error.message);
            return null;
        }
    };

    return { fetchAbbreviatedListings, fetchFullListing, fetchAbbreviatedShowings, fetchImageByFilename, fetchAgentById };
};

/* ===== EXPORTS ===== */
export default Read;